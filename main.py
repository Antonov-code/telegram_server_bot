import configparser
import psutil
import telebot
import time

config = configparser.ConfigParser()
config.read('config.ini')
API_KEY = config.get('DEFAULT', 'api_key')


bot = telebot.TeleBot(API_KEY)


def get_server_status():
    cpu_load = psutil.cpu_percent(interval=1)  # –ó–∞–≥—Ä—É–∑–∫–∞ CPU
    memory = psutil.virtual_memory()  # –û–ó–£
    disk = psutil.disk_usage('/')  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
    status = (
        f"üìä *–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:*\n"
        f"üñ• *CPU*: {cpu_load}%\n"
        f"üíæ *RAM*: {memory.percent}% (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {memory.used // (1024**3)}–ì–ë –∏–∑ {memory.total // (1024**3)}–ì–ë)\n"
        f"üìÄ *Disk*: {disk.percent}% (—Å–≤–æ–±–æ–¥–Ω–æ {disk.free // (1024**3)}–ì–ë –∏–∑ {disk.total // (1024**3)}–ì–ë)"
    )
    return status



def get_network_usage():
    before = psutil.net_io_counters()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –∑–∞–¥–µ—Ä–∂–∫–∏
    time.sleep(1)  # –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É
    after = psutil.net_io_counters()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏

    bytes_sent = after.bytes_sent - before.bytes_sent
    bytes_recv = after.bytes_recv - before.bytes_recv
    
    status = (
        f"üì® –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–¥–∞—á–∏: {bytes_sent / 1024:.2f} KB/s\n"
        f"üì° –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: {bytes_recv / 1024:.2f} KB/s"
    )
    return status


def get_process():
    # all_proc = []
    # for proc in psutil.process_iter(attrs=['pid', 'name', 'username']):
    #     proc_row = f"üîπ PID: {proc.info['pid']} | –ü—Ä–æ—Ü–µ—Å—Å: {proc.info['name']} | –í–ª–∞–¥–µ–ª–µ—Ü: {proc.info['username']}\n"
    #     all_proc.append(proc_row)
    # return str(all_proc)
    return "–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!"
    
@bot.message_handler(commands=['start', 'main', 'help'])
def send_status(message):
    help_info = """/status - —Å—Ç–∞—Ç—É—Å;\n/network - –∑–∞–≥—Ä—É–∑–∫–∞/–æ—Ç–¥–∞—á–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç;\n/proc - –ø—Ä–æ—Ü–µ—Å—Å—ã;\n/penis - ."""
    bot.send_message(message.chat.id, help_info, parse_mode="Markdown")

@bot.message_handler(commands=['status'])
def send_status(message):
    status = get_server_status()
    bot.send_message(message.chat.id, status, parse_mode="Markdown")

@bot.message_handler(commands=['network'])
def send_status(message):
    status = get_network_usage()
    bot.send_message(message.chat.id, status, parse_mode="Markdown")

@bot.message_handler(commands=['proc'])
def send_status(message):
    status = get_process()
    bot.send_message(message.chat.id, status, parse_mode="Markdown")


bot.polling()